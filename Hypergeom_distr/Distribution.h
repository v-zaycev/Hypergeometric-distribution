#pragma once
#include<iostream>
#include<vector>
#include<algorithm>
#include<random>
#include"PROBDIST.H"


/*! \mainpage Hypergeometric distribution 
 *
 * Набор классов, позволяющий хранить информацию о гипергеометрических распределелениях, моделировать выборки для заданного распределения различными методами, и вычислять значение p-value
 с помощью критерия хи-квадрат для заданных выборки и распределения. <br> Доступны три метода моделирования:
 * - \subpage Метод обратной функции
 * - \subpage Метод Испытаний Бернулли
 * - \subpage Таблчный метод обратной функции
 */

/*!
* \brief Класс, содержащий информацию о гипергеометрическом распределении.
* 
* Данный класс хранит в себе информацию о параметрах гипергеометрического распределения, а также вероятности состояний. Вероятности могут считаться по одной,
по несколько или все сразу.
*/
class Hypergeom_distr
{
private:
	int a, b, k;
	int last_calc;
	double* probs;
public:
	/// Конструктор, создающий экземпляр с заданными параметрами распределения
	Hypergeom_distr(int _a = 10, int _b = 10, int _k = 10);
	/// Конструктор копирования
	Hypergeom_distr(Hypergeom_distr& distr);
	~Hypergeom_distr();
	/// Функция, задающая все параметры распределения
	void set_param(int _a, int _b, int _k);
	/// Функция, вычисляющая все вероятности для данного распределения
	void calc_all_probs();
	/// Функция, вычисляющая вероятность для первого состояния, для которого она ещё не рассчитана 
	void calc_next_prob();
	/// Функция, вычисляющая все вероятности для состояний с 0 до n-го и возвращающая последнюю вычисленную вероятность
	double calc_probs_to(int n);
	int get_a() { return a; }
	int get_b() { return b; }
	int get_k() { return k; }
	const double* get_probs() { return probs; };
};


/*!
* 
* \brief Абстрактый класс, предназначенный для генерации выборки гипергеометрического распределения
* 
* 
* Данный класс позволяет генерировать выборку для гипергеометрического распределения с заданными параметрами и размером. Класса имеет три наследника, реализующие
метод обратной функции, метод испытаний Бернулли и табличный метод обратной функции. Также класс позволяетs получить полную информацию моделируемом распределении и методе моделирования. 
*/
class Hypergeom_sample	
{
protected:
	///эмперические частоты, соответствующие выборке
//	int* sim_freq; 
	///класс, содержащий параметры моделируемого распределения
	Hypergeom_distr& h1;
	///размер выборки
	int sample_sz; 
public:
	/// Конструктор, создающий объект для заданных распределения и размера выборки
	/*!
	* \param _h1 Распределение, для которого будет генерироваться выборка
	* \param _n Размер выборки
	*/
	Hypergeom_sample(Hypergeom_distr& _h1, int _n = 1000) :sample_sz(_n), h1(_h1) {};
	/// Конструктор копирования
	Hypergeom_sample(const Hypergeom_sample& smpl);
	virtual ~Hypergeom_sample() {};
	/// Функция, генерирующая выборку
	virtual int* gen_sample()=0;
	/// Функция, позволяющая создавать копию реализации для абстрактного класса
	virtual Hypergeom_sample* copy()=0;	
	void set_sz(int sz) { sample_sz = sz; };
	int get_a() { return h1.get_a(); }
	int get_b() { return h1.get_b(); }
	int get_k() { return h1.get_k(); }
	int get_n() { return sample_sz; }
	/// Функция возвращающая номер, соответствующий методу моделирования, который использует класс 
	virtual int get_type() = 0;
};


/*!
*
* \brief Наследник класса Hypergeom_sample, реализующий метод обратной функции.
*
* 
* Данный класс позволяет генерировать выборку для гипергеометрического распределения с заданными параметрами и размером методом обратной функции. Также класс позволяет
 получить полную информацию моделируемом распределении и методе моделирования.
*/
class Hypergeom_inv : public Hypergeom_sample
{
public:
	/// Конструктор копирования
	Hypergeom_inv(const Hypergeom_inv& a) :Hypergeom_sample(a) {};
	/// Конструктор, создающий объект для заданных распределения и размера выборки
	/*!
	* \param _h1 Распределение, для которого будет генерироваться выборка
	* \param _n Размер выборки
	*/
	Hypergeom_inv(Hypergeom_distr& h1, int n = 1000) :Hypergeom_sample(h1, n) {};
	/// Функция, генерирующая выборку методом обратной функции
	virtual int* gen_sample();
	/// Функция, возвращающая значение 0 - соответствующее методу обратной функции
	virtual int get_type() { return 0; };
	virtual Hypergeom_sample* copy() { return new Hypergeom_inv(*this); };
	virtual ~Hypergeom_inv(){};
};


/*!
*
* \brief  Наследник класса Hypergeom_sample, реализующий табличный метод обратной функции.
*
*
* Данный класс позволяет генерировать выборку для гипергеометрического распределения с заданными параметрами и размером табличным методом обратной функции. Также класс позволяет
 получить полную информацию моделируемом распределении и методе моделирования.
*/
class Hypergeom_table : public Hypergeom_sample
{
public:
	/// Конструктор копирования
	Hypergeom_table(const Hypergeom_table& a) :Hypergeom_sample(a) {};
	/// Конструктор, создающий объект для заданных распределения и размера выборки
	/*!
	* \param _h1 Распределение, для которого будет генерироваться выборка
	* \param _n Размер выборки
	*/
	Hypergeom_table(Hypergeom_distr &h1, int n = 1000) :Hypergeom_sample(h1, n) {};
	/// Функция, генерирующая выборку табличным методом обратной функции
	virtual int* gen_sample();
	/// Функция, возвращающая значение 2 - соответствующее табличному методу обратной функции
	virtual int get_type() { return 2; };
	virtual Hypergeom_sample* copy() { return new Hypergeom_table(*this); };
	virtual ~Hypergeom_table() {};
};

/*!
*
* \brief Наследник класса Hypergeom_sample, использующий испытания Бернулли.
*
*
* Данный класс позволяет генерировать выборку для гипергеометрического распределения с заданными параметрами и размером методом испытаний Бернулли. Также класс позволяет
 получить полную информацию моделируемом распределении и методе моделирования.
*/
class Hypergeom_bern : public Hypergeom_sample
{
public:
	/// Конструктор копирования
	Hypergeom_bern(const Hypergeom_inv& a) :Hypergeom_sample(a) {};
	/// Конструктор, создающий объект для заданных распределения и размера выборки
	/*!
	* \param _h1 Распределение, для которого будет генерироваться выборка
	* \param _n Размер выборки
	*/
	Hypergeom_bern(Hypergeom_distr& h1, int n = 1000) :Hypergeom_sample(h1, n) {};
	/// Функция, генерирующая выборку нетабличным методом испытаний Бернулли
	virtual int* gen_sample();
	/// Функция, возвращающая значение 1 - соответствующее методу испытаний Бернулли
	virtual int get_type() { return 1; };
	virtual Hypergeom_sample* copy() { return new Hypergeom_bern(*this); };
	virtual ~Hypergeom_bern() {};
};

/*!

	\brief	Класс, реализующий вычисление p-value с помощью критерия хи-квадрат

	Данный класс позволяет считать значение p-value для заданной гипотезы и выборки. Все получаемые и используемые значения хранятся в классе и могут быть получены при необходимости.
*/
class Chi_sq
{
private:
	/// значение статистики хи-квадрат
	double chi_sq;
	/// значение p-value 
	double p_val; 
	/// число степеней свободы
	int d_f;
	int	k; 
	int h_k;
	/// размер выборки
	int sample_sz;
	/// эмпирические частоты
	int* mod_freq;
	/// теоретические частоты
	double* th_freq;


public:
	/// Конструктор, задающий выборку и распределение
	Chi_sq(Hypergeom_sample* generator, Hypergeom_distr& h0);
	~Chi_sq();

	/// Функция, полностью обновляющая содержимое в соответствии с заданными выборкой и распределением
	void setData(Hypergeom_sample* generator, Hypergeom_distr& h0);
	/// Функция, считающая значение p-value для заданных ранее выборки и распределения.
	double calc_p_val();

	/// Функция, возвращающая значение статистики ы
	double get_chi_sq() { return chi_sq; }
	/// Функция, возвращающая число степеней свободы
	int get_d_f() { return d_f; }
	/// Функция, возвращающая значение p-value
	double get_p_val() { return p_val; }
	/// Функция, возвращающая размер выборки
	int get_sample_sz() { return sample_sz; }
	/// Функция, возвращающая массив эмпирических частот
	const int* get_mod_freq() { return mod_freq; }
	/// Функция, возвращающая массив теоретических частот
	const double* get_th_freq() { return th_freq; }
};

/** \example Main.cpp
 * 
 */